version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: pgvector/pgvector:pg16
    container_name: claude-flow-postgres
    environment:
      POSTGRES_DB: claude_flow_game
      POSTGRES_USER: gameuser
      POSTGRES_PASSWORD: gamepass123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/backend/database/schemas:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - claude-flow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gameuser -d claude_flow_game"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache and Session Store
  redis:
    image: redis:7-alpine
    container_name: claude-flow-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - claude-flow-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # MongoDB for Neural Patterns and Analytics
  mongodb:
    image: mongo:7
    container_name: claude-flow-mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: mongopass123
      MONGO_INITDB_DATABASE: claude_flow_patterns
    volumes:
      - mongodb_data:/data/db
      - ./config/mongodb/init.js:/docker-entrypoint-initdb.d/init.js:ro
    ports:
      - "27017:27017"
    networks:
      - claude-flow-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: claude-flow-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: gamequeue
      RABBITMQ_DEFAULT_PASS: queuepass123
      RABBITMQ_DEFAULT_VHOST: /claude-flow
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
      - ./config/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    networks:
      - claude-flow-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 15s
      timeout: 10s
      retries: 5

  # InfluxDB for Time Series Metrics
  influxdb:
    image: influxdb:2.7-alpine
    container_name: claude-flow-influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: adminpass123
      DOCKER_INFLUXDB_INIT_ORG: claude-flow
      DOCKER_INFLUXDB_INIT_BUCKET: game-metrics
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: claude-flow-token-123456789
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    ports:
      - "8086:8086"
    networks:
      - claude-flow-network
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 15s
      timeout: 10s
      retries: 5

  # Elasticsearch for Logs and Search
  elasticsearch:
    image: elasticsearch:8.9.0
    container_name: claude-flow-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - claude-flow-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cat/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: claude-flow-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - claude-flow-network
    depends_on:
      - backend

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: claude-flow-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: grafanapass123
      GF_SECURITY_ADMIN_USER: admin
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3001:3000"
    networks:
      - claude-flow-network
    depends_on:
      - prometheus
      - influxdb

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: src/infrastructure/docker/backend.Dockerfile
      target: development
    container_name: claude-flow-backend
    environment:
      NODE_ENV: development
      PORT: 3000
      WS_PORT: 3001
      DATABASE_URL: postgresql://gameuser:gamepass123@postgres:5432/claude_flow_game
      REDIS_URL: redis://redis:6379
      MONGODB_URL: mongodb://root:mongopass123@mongodb:27017/claude_flow_patterns?authSource=admin
      RABBITMQ_URL: amqp://gamequeue:queuepass123@rabbitmq:5672/%2Fclaude-flow
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: claude-flow-token-123456789
      INFLUXDB_ORG: claude-flow
      INFLUXDB_BUCKET: game-metrics
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      CLAUDE_FLOW_ENABLED: true
      NEURAL_EVOLUTION_ENABLED: true
      SELF_IMPROVEMENT_ENABLED: true
      LOG_LEVEL: debug
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./scripts:/app/scripts
      - /app/node_modules
    ports:
      - "3000:3000"   # HTTP API
      - "3002:3001"   # WebSocket
    networks:
      - claude-flow-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: npm run start:dev
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React Application
  frontend:
    build:
      context: .
      dockerfile: src/infrastructure/docker/frontend.Dockerfile
      target: development
    container_name: claude-flow-frontend
    environment:
      REACT_APP_API_URL: http://localhost:3000
      REACT_APP_WS_URL: ws://localhost:3002
      REACT_APP_ENV: development
      GENERATE_SOURCEMAP: true
      FAST_REFRESH: true
    volumes:
      - ./src/frontend:/app/src/frontend
      - ./src/shared:/app/src/shared
      - /app/node_modules
    ports:
      - "3003:3000"
    networks:
      - claude-flow-network
    depends_on:
      - backend
    command: npm run start:frontend:dev

  # Claude Flow Orchestrator Service
  claude-flow-orchestrator:
    build:
      context: .
      dockerfile: src/infrastructure/docker/claude-flow.Dockerfile
    container_name: claude-flow-orchestrator
    environment:
      NODE_ENV: development
      REDIS_URL: redis://redis:6379
      MONGODB_URL: mongodb://root:mongopass123@mongodb:27017/claude_flow_patterns?authSource=admin
      NEURAL_MODELS_PATH: /app/models
      PATTERN_MEMORY_SIZE: 1000
      SWARM_MAX_AGENTS: 20
      EVOLUTION_ENABLED: true
    volumes:
      - ./src/claude-flow:/app/src/claude-flow
      - ./src/neural:/app/src/neural
      - ./src/shared:/app/src/shared
      - claude_flow_models:/app/models
    ports:
      - "3004:3000"
    networks:
      - claude-flow-network
    depends_on:
      - redis
      - mongodb
    command: npm run start:claude-flow

  # Neural Evolution Service
  neural-evolution:
    build:
      context: .
      dockerfile: src/infrastructure/docker/neural.Dockerfile
    container_name: claude-flow-neural
    environment:
      NODE_ENV: development
      MONGODB_URL: mongodb://root:mongopass123@mongodb:27017/claude_flow_patterns?authSource=admin
      TENSORFLOW_BACKEND: cpu
      EVOLUTION_POPULATION_SIZE: 50
      EVOLUTION_GENERATIONS: 100
      MUTATION_RATE: 0.1
      GPU_ENABLED: false
    volumes:
      - ./src/neural:/app/src/neural
      - ./src/shared:/app/src/shared
      - neural_models:/app/models
      - neural_training_data:/app/training_data
    ports:
      - "3005:3000"
    networks:
      - claude-flow-network
    depends_on:
      - mongodb
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Nginx Load Balancer and Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: claude-flow-nginx
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - claude-flow-network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  rabbitmq_data:
  influxdb_data:
  influxdb_config:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
  claude_flow_models:
  neural_models:
  neural_training_data:

networks:
  claude-flow-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16